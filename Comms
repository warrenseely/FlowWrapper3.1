void printData(int data) //pass in an integer to determine values to print
{
  switch(data){
      case 1: //print all data for troubleshooting
        //Serial.print("Paper setpoint pkg/min: "); //user given
//       Serial.print(jaw_speed); //send out on usb
//       Serial.print(" ");
        //Serial.print("Paper pkg/min actual: "); //calculated during runtime
        //Serial.println(pkgPerMinute);

//        Serial.print(jawtimeDifference);
//        Serial.print(" ");
//        Serial.print(jawtimingScalar);
//        Serial.print(" ");
        //Serial.println(jaw_error);
        //Serial.print(" ");
        
//        Serial.print(integral);
//        Serial.print(" "); //send out on usb
//        Serial.print(paper_speed); //sent out from PID
//        Serial.print(" ");//timingScalarcopy: "); //real time count
//        Serial.print(feeder_speed);
//        Serial.print("  ");
        
          
        Serial.print(JawCount); 
        Serial.print(" ");
        Serial.print(PaperCount);
        Serial.print(" ");
        Serial.println(FeederCount);
        //Serial.print(" ");
        //Serial.println(tdc);//
      break;
      case 2:
        Serial.print("Paper actual pkg/min: "); //calculated during runtime
        Serial.println(pkgPerMinute); //send out on usb
      break;
      case 3:
        Serial.print("Paper setpoint pkg/min: "); //user given
        Serial.println(setpoint); //send out on usb
      break;
      case 4:
        Serial.print("Pkg since last start: "); //real time count
        Serial.println(pkgcount); //send out on usb
      break;
      case 5:
        Serial.print("Time Difference: ");
        Serial.println(jawtimeDifference); //the time difference between register and finger
      break;
      case 6:
        Serial.println("Enter desired packages per minute and press Enter: ");
//        int flag = 1;
//        int i = 0;
//        byte temp;
//        char val[10];
//      
//        while(flag) //make sure we have data
//        {
//          if(Serial.available())
//          {
//              temp = Serial.read(); //sent as a char value
//              val[i++] = temp; //move to array to process
//              val[i] = '\0'; //terminate it
//              setpoint = atoi(val); //convert to int and store in setpoint
//              flag = 0;
//          }
//        }
      break;  
      case 7:
//        Serial.print(paper_speed); //sent out from PID
//        Serial.print(" "); //real time count
        Serial.print("Pkg since last start: "); //real time count
        Serial.print(pkgcount); //send out on usb
        Serial.print(" ");
        Serial.print(feeder_speed);  
        Serial.print(" ");
        Serial.print(feedertimeDifference);
        Serial.print(" ");
        Serial.print(jaw_speed);  
        Serial.print(" ");
        Serial.print(jaw_error);
        Serial.print(" ");
        Serial.println(jawtimeDifference);
      break;  
  }
}

//write a string to the LCD; Utilizes function overloading to determine input data type
void writeLCD(char *string, int Hcursor) //takes a string or int and writes to the LCD display. Set unused type to "0" or 0 respectively
{
  const unsigned char home_cursor[] = {27, '[', 'j', '\0'};
  //const unsigned char cursor_L2[] = {27, '[', '<' '\0'};

  if(Hcursor == 0) //0 means we are printing after nothing else and can home the cursor
  {
    for(int i = 0; i < 3; i++) //loop and send the home sequence
      Serial.write(home_cursor[i]);
  }
  else if(Hcursor == 1) //1 means we are printing after something so we want to start on next line
  {
    
  }
    
  Serial.print(string);
}

//write an int to the LCD; Utilizes function overloading to determine input data type
void writeLCD(int data, int Hcursor) //takes an int and writes to the LCD display. 
{
  const unsigned char home_cursor[] = {27, '[', 'j', '\0'};

  if(Hcursor == 0) //0 means we are printing nothing else and can home the cursor
  {
    for(int i = 0; i < 3; i++) //loop and send the home sequence
      Serial.write(home_cursor[i]);
  }
  else if(Hcursor == 1) //1 means we are printing after something so we want to start on next line
  {
    
  }
    
  Serial.print(data);
}

//write a float to the LCD; Utilizes function overloading to determine input data type
void writeLCD(float data, int Hcursor) //takes an int and writes to the LCD display. 
{
  const unsigned char home_cursor[] = {27, '[', 'j', '\0'};

  if(Hcursor == 0) //0 means we are printing nothing else and can home the cursor
  {
    for(int i = 0; i < 3; i++) //loop and send the home sequence
      Serial.write(home_cursor[i]);
  }
  else if(Hcursor == 1) //1 means we are printing after something so we want to start on next line
  {
    
  }
    
  Serial.print(data);
}

//write an int to the LCD; Utilizes function overloading to determine input data type
void writeLCD(long int data, int Hcursor) //takes an int and writes to the LCD display. 
{
  const unsigned char home_cursor[] = {27, '[', 'j', '\0'};

  if(Hcursor == 0) //0 means we are printing nothing else and can home the cursor
  {
    for(int i = 0; i < 3; i++) //loop and send the home sequence
      Serial.write(home_cursor[i]);
  }
  else if(Hcursor == 1) //1 means we are printing after something so we want to start on next line
  {
    
  }
    
  Serial.print(data);
}

void sendString(const char* s) //this function sends the data to the display screen arduino via i2C. Limit of 32 bytes per send so send one screen line at a time
{
  Wire.beginTransmission(42);
  Wire.write(s);
  Wire.endTransmission();
}

void Display(int type)
{
  switch (type){
    case 0: 
      sendString("\f"); //clears the display screen
    break;
    case 1: //print out all data for troubleshooting
      sendString("\f"); //clear the screen each time
      
      sendString("Paper setpoint pkg/min: "); //user given
      sprintf(buf, "%i", setpoint); //convert the number to a string
      sendString(buf); //send out on usb
      
      sendString("\nPaper setpoint pkg/min actual: "); //calculated during runtime
      sprintf(buf, "%i", pkgPerMinute); //convert the number to a string
      sendString(buf); //send out on usb
      
      sendString("\nFeeder speed: "); //send out on i2C
      sprintf(buf, "%i", feeder_speed); //convert the number to a string
      sendString(buf); //send out on usb

      sendString("\nPaper speed: ");
      sprintf(buf, "%i", paper_speed); //convert the number to a string
      sendString(buf); //send out on usb 

      sendString("\nJaw speed: ");
      sprintf(buf, "%i", jaw_speed); //convert the number to a string
      sendString(buf); //send out on usb
      
//      sendString(" ");//timingScalarcopy: "); //real time count
//      sendString(feedertimingScalarcopy, 3); //send out on usb with 3 decimal points precision   
//      sendString(" ");//papercount: "); 
//      sendString(paper_count);   
//      sendString(" ");//feedercount: ");
//      sendString(feeder_count);
//      sendString(" ");
//      sendString(tdc);//
    break;
    case 2:
      sendString("\f"); //clear the screen each time
      sendString("Pkg since last\nstart: "); //user given
      sprintf(buf, "%i", pkgcount); //convert the number to a string
      sendString(buf); //send out on usb

      sendString("\nPkg/min: "); //user given
      sprintf(buf, "%i", pkgPerMinute); //convert the number to a string
      sendString(buf); //send out on usb
    break;
  }
}
