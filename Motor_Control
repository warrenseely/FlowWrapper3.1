void motorDrive(int state) 
  { 
    if(state == stopAll)
    {
      //send a motor stop command here
      digitalWrite(JawEnable_PIN, 0); //shut off vfd for jaws
      digitalWrite(PaperEnable_PIN, 0); //shut off vfd for paper
      digitalWrite(FeederEnable_PIN, 0); //shut off vfd for feeder chain
      analogWrite(feederPWM, ~0); //feeder chain
      analogWrite(paperPWM, ~0); //paper feed
      analogWrite(jawPWM, ~0); //jaws
    }
  }

  void startupProcedure(void)
  {
    switch(startupFlag) {
        case 1:    //align jaw
          if(!homeflag) //only want to write this once
          {
            homeflag = 1; //set flag
            jaw_speed = 745;//845;//10;
            jawhomeflag = -1; //make sure this is set to 1 for startup
            analogWrite(jawPWM, jaw_speed); //write the speed of the film during cut(hardcode for homing)
            digitalWrite(JawEnable_PIN, 1);
            Serial.println("homing jaws");  
            //writeLCD("homing jaws", 0);  
            sendString("homing jaws\n");        
          }
          if(jawhomeflag == 2) //have the jaws shut off via interrupt?
          {
            startupFlag = 2; //we saw the jaw reach home, now we can home the paper
            //jawhomeflag = 0; //reset
            homeflag = 0; //reset for next state
            Serial.println("finished homing jaws");
            //writeLCD("finished homing jaws", 0);
            sendString("finished homing jaws\n");
          }
        break;
        case 2: //align paper
          if(!homeflag) //only want to write this once
          {
            homeflag = 1; //set flag
            paperHome = 1; //so paper shuts off in ISR
            paperhomeflag = 0; //make sure this is set to zero
            //analogWrite(paperPWM, 220); //write the speed during homing(hardcode for homing)
            digitalWrite(PaperEnable_PIN, 1);
            Serial.println("homing paper");
            //writeLCD("homing paper", 0);
            sendString("homing paper\n");
          }
          if(paperhomeflag == 2) //have we seen a register mark?
          {
            startupFlag = 3; //we saw the paper reach home, now we can home the feeder chain
            paperhomeflag = 0; //reset
            homeflag = 0; //reset for next state
            Serial.println("finished homing paper");
            //writeLCD("finished homing paper", 0);
            sendString("finished homing paper\n");
          }
        break;
        case 3: //align feeder chain
          if(!homeflag) //only want to write this once
          {
            homeflag = 1; //set flag for state change
            fingerHomeFlag = 1; //set flag for finger homing
            analogWrite(feederPWM, 840); //15 write the speed during homing(hardcode for homing)
            //enable feeder vfd, shut off by pin change interrupt on A0 when finger is seen
            digitalWrite(FeederEnable_PIN, 1);
            Serial.println("homing feeder");
             //writeLCD("homing and priming feeder", 0);
             sendString("homing and priming feeder\n");
          }
          if(digitalRead(PattySensor_PIN)) //pin goes HIGH when we see a patty
          {
            homeflag = 0; //reset flag
            startupFlag = 4; //we saw a patty, now we can home the feeder chain
            sendString("Patty Found\n");
            Serial.println("Patty Found");
          }
       break;
       case 4:
          if(!fingerHomeFlag) //have we seen a feeder finger??
          {
            homeflag = 0; //reset flag
            startupFlag = 5; //we saw the feeder reach home, now we are done homing machine
            Serial.println("finished homing feeder");
             //writeLCD("finished homing feeder", 0);
             sendString("finished homing feeder\n");
            startTime = millis(); //preserve for startup delay
          }
       break; 
       case 5: //startup delay
          unsigned long currentTime = millis();
         if((unsigned long)(currentTime - startTime) >= startupDelay) //we have aligned all axis now we wait for two seconds(timed loop = 100ms X 20 = 2000ms = 2 seconds)
         {
            Serial.println("Starting");
            //printData(1);
            //writeLCD("Starting", 0);
            sendString("Starting\n");
            //startupDelay = 0; //reset
            startupFlag = 0; //set flag so no longer enter this subroutine
            cli();
            FeederCount = 0; //reset to 0 for startup
            PaperCount = 0; //reset to 0 for startup
            JawCount = 0; //reset to 0 for startup
            //timingScalar = 0;
            //jawtimingScalar = 0;
            sei();
            
            feeder_count = 0; //reset to 0 for startup
            paper_count = 0; //reset to 0 for startup
            jaw_count = 0; //reset for startup
            //timingScalar = feedertimingScalarcopy = 0;
            //jawtimingScalarcopy = 0; 
            //getSpeedSetting(); //read the analog voltage for the paper vfd
            //paper_speed = setpoint;
            //get the starting speeds
            //paper_speed = 25; //we hard-coded the paper_speed for homing. Setpoint contains the value from the analog speed dial read at startup
            //jaw_speed = (paper_speed * 3.82) + 0.5; //start at scaled speed of paper, add 0.5 so it is rounded to nearest integer by truncation
            //feeder_speed = (paper_speed * 3.82) + 0.5; //start at scaled speed of paper, add 0.5 so it is rounded to nearest integer by truncation
            
            //now we set the starting PWMs
            analogWrite(jawPWM, jaw_speed); //write the speed of the film for run;23; this is only start speed, the PID takes control after this
            //analogWrite(paperPWM, paper_speed); //write the speed for paper to run;10; constant
            analogWrite(feederPWM, feeder_speed); //write the speed for feeder chain to run;52; this is only start speed, the PID takes control after this
           
            //now we activate the vfds
            digitalWrite(JawEnable_PIN, 1); //enable the jaws vfd
            digitalWrite(PaperEnable_PIN, 1); //enable paper vfd
            digitalWrite(FeederEnable_PIN, 1); //enable feeder chain vfd
         }            
        break;
      }
  }


void getSettings()
{
 do{
  //setpoint = analogRead(speedset); //read the analog value; returns 0-1023(0-5v)
  //setpoint = analogRead(speedset); //15 bit pwm is 0-1023, analogRead() produces 0-1023
  //Serial.println(speedset);
    getSpeedSetting(); //read the analog signal for speed input
    
    unsigned int start = millis(); //short delay time between each loop
    while(millis() - start < 200); //200ms delay
    
    settingsBtn.read(); //read the status of the settings button to see if we continue to loop or exit
  }while(!settingsBtn.wasReleased());

    //offset = 340 * (30 / paper_speed); //timing offset between feeder finger and register mark; 300ms offset when paper_speed is 10(PWM). 
                                       //If paper_speed changes this should appropriately modify offset to match the new speed
                                       
    //jawoffset = 300 * (10 / paper_speed); //timing offset between jaw home position and register mark
                                          //If paper_speed changes this should appropriately modify offset to match the new speed
    
    setBtnFlag = 0; //reset so do not enter subroutine again unless button pressed again
  }

void getSpeedSetting(void)
{
  setpoint = analogRead(speedset); //read the analog value; returns 0-1023(0-5v)
  setpoint = analogRead(speedset); //15 bit pwm is 0-1023, analogRead() produces 0-1023
                                        // not sure if need to constrain or remap
  //int temp = (setpoint / 4) + 0.5; //translate from pwm signal to pkgs/min
  
    setpoint = map(setpoint, 0, 1023, 8, 190); //translate and copy to paper_speed
    //mapFlag = 1;
  
//  sendString("\r"); //clear screen to end of current line; should just clear this line so we redraw everything just on this line when we loop
//  sendString("Current speed: ");
  if(setpoint != lastsetpoint)
  {
    lastsetpoint = setpoint; //copy
    Serial.print("Current Speed: ");
    sprintf(buf, "%i", setpoint);
    //sendString(buf);
    Serial.println(buf);
  }
}
